scatterplot("PC.New","SC.Est",9),
scatterplot("PC.New","MH.New",10),
scatterplot("PC.New","MH.Est",11),
scatterplot("PC.Est","SC.New",12),
scatterplot("PC.Est","SC.Est",13),
scatterplot("PC.Est","MH.New",14),
scatterplot("PC.Est","MH.Est",15),
scatterplot("SC.New","SC.Est",16),
scatterplot("SC.New","MH.New",17),
scatterplot("SC.New","MH.Est",18),
scatterplot("SC.Est","MH.New",19),
scatterplot("SC.Est","MH.Est",20),
scatterplot("MH.New","MH.Est",21))
#save plots
for (i in 1:length(plots)){
figurename <- paste("SHEP Access Composite and Wait Time Measures Plot", i)
ggsave(filename=paste("C:/Users/mcui/Desktop/VA Assessment/pgms/output/plots/", figurename, ".pdf", sep=""),
plot=plots[[i]], width=15, height = 11.5)
}
#save plots
for (i in 1:length(plots)){
figurename <- paste("SHEP Access Composite and Wait Time Measures Plot", i)
ggsave(filename=paste("C:/Users/mcui/Desktop/VA Assessment/pgms/output/plots/", figurename, ".pdf", sep=""),
plot=plots[[i]], width=15, height = 11.5)
}
library(plyr)
library(dplyr)
library(reshape2)
library(sqldf)
library(ggplot2)
#VA SHEP PCMH facility level composite data
shep_comp1 <- read.csv("O:/BAccessQual/shep/outpatient/Shep_pcmh_adj_forrand.csv", stringsAsFactors=F)
shep_comp2 <- shep_comp1 %>%
filter(fiscalyear==2014 & orglevel=="Facility") %>%
mutate(VISN_ID = ifelse(nchar(visn)==1, paste("(V0",visn, ")", sep=""), paste("(V", visn, ")", sep="")),
FAC_ID = ifelse(nchar(facilitynumber)==1, paste("(00", facilitynumber, ")", sep=""),
ifelse(nchar(facilitynumber)==2, paste("(0", facilitynumber, ")", sep=""),
paste("(", facilitynumber, ")", sep=""))),
FAC_VISN_ID = paste(VISN_ID, FAC_ID),
AdjAccess = AdjAccess*100) %>%
select(-c(visn, facilitynumber, orglevel, orgname, state))
#VA SHEP PCHM facility level item data
shep_item1 <- read.csv("O:/BAccessQual/shep/outpatient/Shep_pcmh_resplevel_forrand.csv", stringsAsFactors=F)
#Items for corr matrix
keep_items <- c("Q6","Q9","Q14","Q16","Q18","Q12")
shep_item2 <- shep_item1 %>%
filter(fiscalyear==2014 & orglevel=="Facility" & Qvar %in% keep_items & response_lbl=="Always") %>%
mutate(VISN_ID = ifelse(nchar(visn)==1, paste("(V0",visn, ")", sep=""), paste("(V", visn, ")", sep="")),
FAC_ID = ifelse(nchar(facilitynumber)==1, paste("(00", facilitynumber, ")", sep=""),
ifelse(nchar(facilitynumber)==2, paste("(0", facilitynumber, ")", sep=""),
paste("(", facilitynumber, ")", sep=""))),
FAC_VISN_ID = paste(VISN_ID, FAC_ID)) %>%
select(-c(visn, facilitynumber, orglevel, orgname, state))
shep_item3 <- dcast(shep_item2, FAC_VISN_ID ~ Qvar, value.var = "weighted_pct")
shep_comb <- merge(shep_comp2, shep_item3, by = "FAC_VISN_ID")
#Wait time data
wait1 <- read.csv("O:/BAccessQual/hedis/FacilitiesWaitTimeData30daysForScatterplots.csv", stringsAsFactors=F)
wait2 <- wait1 %>%
mutate(FAC_VISN_ID = substr(Facility.Name, 1, 11)) %>%
select(-Facility.Name)
comb1 <- inner_join(shep_comb, wait2, by="FAC_VISN_ID")
wait_meas <- c("MH.New","MH.Est","PC.New","PC.Est","SC.New","SC.Est")
#Transform wait time measure to 0-100 scale
comb1[,wait_meas] <- sapply(comb1[,wait_meas], function(x) x*100)
#Correlation matrix for PCMH Access Composites, items and Wait time measures
corr_matx1 <- cor(comb1[,c("AdjAccess", "AdjAccess2", keep_items, wait_meas)])
#write.csv(corr_matx1, "C:/Users/mcui/Desktop/VA Assessment/pgms/output/Access and Wait Time Correlation Matrix.csv")
windowsFonts(Times=windowsFont("TT Times New Roman"))
titles <- data.frame(var = c("AdjAccess","PC.New","PC.Est","SC.New","SC.Est","MH.New","MH.Est"),
axis_title = c("Adjusted PCMH Access Composite (0-100)",
"Primary Care: % of new patient appts completed within 30 days of preferred date",
"Primary Care: % of established patient appts completed within 30 days of preferred date",
"Specialty Care: % of new patient appts completed within 30 days of preferred date",
"Specialty Care: % of established patient appts completed within 30 days of preferred date",
"Mental Health Care: % of new patient appts completed within 30 days of preferred date",
"Mental Health Care: % of established patient appts completed within 30 days of preferred date"),
main_title = c("PCMH SHEP Access Composite","Wait Time - New Primary Care",
"Wait Time - Established Primary Care", "Wait Time - New Specialty Care",
"Wait Time - Established Primary Care", "Wait Time - New Mental Health Care",
"Wait Time - Established Mental Health Care"))
scatterplot <- function(var1, var2, figurenum){
x_quarts <- quantile(comb1[,var1])
x_breaks <- c(floor(min(comb1[,var1])), as.numeric(x_quarts[2]), mean(comb1[,var1]),
as.numeric(x_quarts[4]), ceiling(max(comb1[,var1])))
x_labels <- c(paste(as.character(floor(min(comb1[,var1]))), " (Min)"),
paste(as.character(round(x_quarts[2],0)), " (Q1)", sep=""),
paste(as.character(round(mean(comb1[,var1]), 1)), " (Mean)",sep=""),
paste(as.character(round(x_quarts[4],0)), " (Q3)", sep=""),
paste(as.character(ceiling(max(comb1[,var1]))), " (Max)", sep=""))
y_quarts <- quantile(comb1[,var2])
y_breaks <- c(floor(min(comb1[,var2])), as.numeric(y_quarts[2]), mean(comb1[,var2]),
as.numeric(y_quarts[4]), ceiling(max(comb1[,var2])))
y_labels <- c(paste(as.character(floor(min(comb1[,var2]))), " (Min)"),
paste(as.character(round(y_quarts[2],0)), " (Q1)", sep=""),
paste(as.character(round(mean(comb1[,var2]), 1)), " (Mean)",sep=""),
paste(as.character(round(y_quarts[4],0)), " (Q3)", sep=""),
paste(as.character(ceiling(max(comb1[,var2]))), " (Max)", sep=""))
var1_title <- as.character(titles[match(var1, titles[,"var"]), "axis_title"])
var2_title <- as.character(titles[match(var2, titles[,"var"]), "axis_title"])
title <- paste("Figure ", figurenum, ": ", as.character(titles[match(var1, titles[,"var"]), "main_title"]),
" vs. ", as.character(titles[match(var2, titles[,"var"]), "main_title"]), sep="")
plot1 <- ggplot(comb1, aes_string(var1, var2, label="FAC_VISN_ID")) +
annotate("rect", xmin=floor(min(comb1[,var1])), xmax=round(mean(comb1[,var1]), 1),
ymin=floor(min(comb1[,var2])), ymax=round(mean(comb1[,var2]), 1),
fill = "coral1") +
annotate("rect", xmin=floor(min(comb1[,var1])), xmax=round(mean(comb1[,var1]), 1),
ymin=round(mean(comb1[,var2]), 1), ymax=ceiling(max(comb1[,var2])),
fill = "gold") +
annotate("rect", xmin=round(mean(comb1[,var1]), 1), xmax=ceiling(max(comb1[,var1])),
ymin=floor(min(comb1[,var2])), ymax=round(mean(comb1[,var2]), 1),
fill = "gold") +
annotate("rect", xmin=round(mean(comb1[,var1]), 1), xmax=ceiling(max(comb1[,var1])),
ymin=round(mean(comb1[,var2]), 1), ymax=ceiling(max(comb1[,var2])),
fill = "chartreuse3") +
annotate("segment", x=floor(min(comb1[,var1])), xend=ceiling(max(comb1[,var1])),
y=floor(min(comb1[,var2])), yend=ceiling(max(comb1[,var2])), colour="blue",
size = 1.1) +
geom_text(size=3.2, alpha=0.8, fontface="bold") +
scale_x_continuous(breaks=x_breaks, labels=x_labels) +
scale_y_continuous(breaks=y_breaks, labels=y_labels) +
xlab(var1_title) +
ylab(var2_title) +
theme(axis.text.x=element_text(angle=90, vjust=0.5, face="bold", color="black"),
axis.text.y=element_text(face="bold", color="black")) +
ggtitle(title)
return(plot1)
}
#List of all scatterplots for PCMH SHEP composite and Wait Time Measures
plots <- list(scatterplot("AdjAccess","PC.New",1),
scatterplot("AdjAccess","PC.Est",2),
scatterplot("AdjAccess","SC.New",3),
scatterplot("AdjAccess","SC.Est",4),
scatterplot("AdjAccess","MH.New",5),
scatterplot("AdjAccess","MH.Est",6),
scatterplot("PC.New","PC.Est",7),
scatterplot("PC.New","SC.New",8),
scatterplot("PC.New","SC.Est",9),
scatterplot("PC.New","MH.New",10),
scatterplot("PC.New","MH.Est",11),
scatterplot("PC.Est","SC.New",12),
scatterplot("PC.Est","SC.Est",13),
scatterplot("PC.Est","MH.New",14),
scatterplot("PC.Est","MH.Est",15),
scatterplot("SC.New","SC.Est",16),
scatterplot("SC.New","MH.New",17),
scatterplot("SC.New","MH.Est",18),
scatterplot("SC.Est","MH.New",19),
scatterplot("SC.Est","MH.Est",20),
scatterplot("MH.New","MH.Est",21))
plots[[4]]
plots[[10]]
titles <- data.frame(var = c("AdjAccess","PC.New","PC.Est","SC.New","SC.Est","MH.New","MH.Est"),
axis_title = c("Adjusted PCMH Access Composite (0-100)",
"Primary Care: % of new patient appts completed within 30 days of preferred date",
"Primary Care: % of established patient appts completed within 30 days of preferred date",
"Specialty Care: % of new patient appts completed within 30 days of preferred date",
"Specialty Care: % of established patient appts completed within 30 days of preferred date",
"Mental Health Care: % of new patient appts completed within 30 days of preferred date",
"Mental Health Care: % of established patient appts completed within 30 days of preferred date"),
main_title = c("PCMH SHEP Access Composite","Wait Time - New Primary Care",
"Wait Time - Established Primary Care", "Wait Time - New Specialty Care",
"Wait Time - Established Specialty Care", "Wait Time - New Mental Health Care",
"Wait Time - Established Mental Health Care"))
scatterplot <- function(var1, var2, figurenum){
x_quarts <- quantile(comb1[,var1])
x_breaks <- c(floor(min(comb1[,var1])), as.numeric(x_quarts[2]), mean(comb1[,var1]),
as.numeric(x_quarts[4]), ceiling(max(comb1[,var1])))
x_labels <- c(paste(as.character(floor(min(comb1[,var1]))), " (Min)"),
paste(as.character(round(x_quarts[2],0)), " (Q1)", sep=""),
paste(as.character(round(mean(comb1[,var1]), 1)), " (Mean)",sep=""),
paste(as.character(round(x_quarts[4],0)), " (Q3)", sep=""),
paste(as.character(ceiling(max(comb1[,var1]))), " (Max)", sep=""))
y_quarts <- quantile(comb1[,var2])
y_breaks <- c(floor(min(comb1[,var2])), as.numeric(y_quarts[2]), mean(comb1[,var2]),
as.numeric(y_quarts[4]), ceiling(max(comb1[,var2])))
y_labels <- c(paste(as.character(floor(min(comb1[,var2]))), " (Min)"),
paste(as.character(round(y_quarts[2],0)), " (Q1)", sep=""),
paste(as.character(round(mean(comb1[,var2]), 1)), " (Mean)",sep=""),
paste(as.character(round(y_quarts[4],0)), " (Q3)", sep=""),
paste(as.character(ceiling(max(comb1[,var2]))), " (Max)", sep=""))
var1_title <- as.character(titles[match(var1, titles[,"var"]), "axis_title"])
var2_title <- as.character(titles[match(var2, titles[,"var"]), "axis_title"])
title <- paste("Figure ", figurenum, ": ", as.character(titles[match(var1, titles[,"var"]), "main_title"]),
" vs. ", as.character(titles[match(var2, titles[,"var"]), "main_title"]), sep="")
plot1 <- ggplot(comb1, aes_string(var1, var2, label="FAC_VISN_ID")) +
annotate("rect", xmin=floor(min(comb1[,var1])), xmax=round(mean(comb1[,var1]), 1),
ymin=floor(min(comb1[,var2])), ymax=round(mean(comb1[,var2]), 1),
fill = "coral1") +
annotate("rect", xmin=floor(min(comb1[,var1])), xmax=round(mean(comb1[,var1]), 1),
ymin=round(mean(comb1[,var2]), 1), ymax=ceiling(max(comb1[,var2])),
fill = "gold") +
annotate("rect", xmin=round(mean(comb1[,var1]), 1), xmax=ceiling(max(comb1[,var1])),
ymin=floor(min(comb1[,var2])), ymax=round(mean(comb1[,var2]), 1),
fill = "gold") +
annotate("rect", xmin=round(mean(comb1[,var1]), 1), xmax=ceiling(max(comb1[,var1])),
ymin=round(mean(comb1[,var2]), 1), ymax=ceiling(max(comb1[,var2])),
fill = "chartreuse3") +
annotate("segment", x=floor(min(comb1[,var1])), xend=ceiling(max(comb1[,var1])),
y=floor(min(comb1[,var2])), yend=ceiling(max(comb1[,var2])), colour="blue",
size = 1.1) +
geom_text(size=3.2, alpha=0.8, fontface="bold") +
scale_x_continuous(breaks=x_breaks, labels=x_labels) +
scale_y_continuous(breaks=y_breaks, labels=y_labels) +
xlab(var1_title) +
ylab(var2_title) +
theme(axis.text.x=element_text(angle=90, vjust=0.5, face="bold", color="black"),
axis.text.y=element_text(face="bold", color="black")) +
ggtitle(title)
return(plot1)
}
#List of all scatterplots for PCMH SHEP composite and Wait Time Measures
plots <- list(scatterplot("AdjAccess","PC.New",1),
scatterplot("AdjAccess","PC.Est",2),
scatterplot("AdjAccess","SC.New",3),
scatterplot("AdjAccess","SC.Est",4),
scatterplot("AdjAccess","MH.New",5),
scatterplot("AdjAccess","MH.Est",6),
scatterplot("PC.New","PC.Est",7),
scatterplot("PC.New","SC.New",8),
scatterplot("PC.New","SC.Est",9),
scatterplot("PC.New","MH.New",10),
scatterplot("PC.New","MH.Est",11),
scatterplot("PC.Est","SC.New",12),
scatterplot("PC.Est","SC.Est",13),
scatterplot("PC.Est","MH.New",14),
scatterplot("PC.Est","MH.Est",15),
scatterplot("SC.New","SC.Est",16),
scatterplot("SC.New","MH.New",17),
scatterplot("SC.New","MH.Est",18),
scatterplot("SC.Est","MH.New",19),
scatterplot("SC.Est","MH.Est",20),
scatterplot("MH.New","MH.Est",21))
#save plots
for (i in 1:length(plots)){
figurename <- paste("SHEP Access Composite and Wait Time Measures Plot", i)
ggsave(filename=paste("C:/Users/mcui/Desktop/VA Assessment/pgms/output/plots/", figurename, ".pdf", sep=""),
plot=plots[[i]], width=15, height = 11.5)
}
#save plots
for (i in 1:length(plots)){
figurename <- paste("SHEP Access Composite and Wait Time Measures Plot", i)
ggsave(filename=paste("C:/Users/mcui/Desktop/VA Assessment/pgms/output/plots/", figurename, ".pdf", sep=""),
plot=plots[[i]], width=15, height = 11.5)
}
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
source("global.R")
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
#Get parsed data from parser.R into dataframes
dataframes <- list(
trend = as.data.frame(read.csv("./data/measure_trend.csv", stringsAsFactors=F)),
measure= as.data.frame(read.csv("./data/measure_domain.csv", stringsAsFactors=F))
)
dataframes <- list(
trend = as.data.frame(read.csv("C:/users/mcui/desktop/datavis/shiny/data-explore/data/measure_trend.csv", stringsAsFactors=F)),
measure= as.data.frame(read.csv("C:/users/mcui/desktop/datavis/shiny/data-explore/data/data/measure_domain.csv", stringsAsFactors=F))
)
#Get parsed data from parser.R into dataframes
dataframes <- list(
trend = as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/measure_trend.csv", stringsAsFactors=F)),
measure= as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/data/measure_domain.csv", stringsAsFactors=F))
)
trend = as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/measure_trend.csv", stringsAsFactors=F))
measure= as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/data/measure_domain.csv", stringsAsFactors=F))
dataframes <- list(
trend = as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/measure_trend.csv", stringsAsFactors=F)),
measure= as.data.frame(read.csv("C:/Users/Mcui/desktop/datavis/shiny/data-explore/data/measure_domain.csv", stringsAsFactors=F))
)
names(dataframes[1])
names(dataframes[[1])
names(dataframes[[1]])
plot <- ggplot(dataframes[[1]], aes(x=Year_Quarter, y=Score, group=VA_Hospital, fill=VA_Hospital)) + geom_bar()
plot
plot <- ggplot(dataframes[[1]], aes(x=Year_Quarter, y=Score, group=VA_Hospital, fill=VA_Hospital)) + geom_bar(aes(y=Score), stat="identity", color="black")
plot
foo <- dataframes[[2]]
names(foo)
df <- dataframes[[2]]
df <- dataframes[[2]]
df_va <- df %>% filter(VA_Hospital == "VA Hospital")
df_nonva <- df %>% filter(VA_Hospital == "Non-VA Hospital")
# plotting
plot <- ggplot(df, aes(x=Measure_Domain, y=Composite_Score, group=VA_Hospital, color=VA_Hospital,
fill=VA_Hospital)) +
geom_text(data=df_va, aes(y=Score, label=Score), size=3, fontface="italic", hjust=-0.25) +
geom_text(data=df_nonva, aes(y=Score, label=Score), size=3, fontface="italic", hjust=1.25) +
geom_bar(data=df_va, aes(y=Score), stat="identity", color="black") +
geom_bar(data=df_nonva, aes(y=-Score), stat="identity", color="black") +
facet_grid(Bed_size ~ Teach) +
scale_y_continuous(labels=abs, expand=c(0.4, 0.4)) +
scale_fill_manual(values=CATEGORYCOLORS) +
scale_color_manual(values=CATEGORYCOLORS) +
labs(title="Hospital Compare Performance by Measure Domain (2014 Q4)",
x="Measure Domain",
y="Composite Rate") +
theme(panel.background=element_blank(),
axis.text.x=element_blank(),
axis.ticks=element_blank())
plot <- plot + coord_flip()  # flip coordinates
plot
names(df)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
plot <- ggplot(df, aes(x=Measure_Domain, y=Composite_Score, group=VA_Hospital, color=VA_Hospital,
fill=VA_Hospital)) +
geom_text(data=df_va, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=-0.25) +
geom_text(data=df_nonva, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=1.25) +
geom_bar(data=df_va, aes(y=Composite_Score), stat="identity", color="black") +
geom_bar(data=df_nonva, aes(y=-Composite_Score), stat="identity", color="black") +
facet_grid(Bed_size ~ Teach) +
scale_y_continuous(labels=abs, expand=c(0.4, 0.4)) +
scale_fill_manual(values=CATEGORYCOLORS) +
scale_color_manual(values=CATEGORYCOLORS) +
labs(title="Hospital Compare Performance by Measure Domain (2014 Q4)",
x="Measure Domain",
y="Composite Rate") +
theme(panel.background=element_blank(),
axis.text.x=element_blank(),
axis.ticks=element_blank())
plot <- plot + coord_flip()  # flip coordinates
return(plot)
plot <- ggplot(df, aes(x=Measure_Domain, y=Composite_Score, group=VA_Hospital, color=VA_Hospital,
fill=VA_Hospital)) +
geom_text(data=df_va, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=-0.25) +
geom_text(data=df_nonva, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=1.25) +
geom_bar(data=df_va, aes(y=Composite_Score), stat="identity", color="black") +
geom_bar(data=df_nonva, aes(y=-Composite_Score), stat="identity", color="black") +
facet_grid(Bed_size ~ Teach) +
scale_y_continuous(labels=abs, expand=c(0.4, 0.4)) +
scale_fill_manual(values=CATEGORYCOLORS) +
scale_color_manual(values=CATEGORYCOLORS) +
labs(title="Hospital Compare Performance by Measure Domain (2014 Q4)",
x="Measure Domain",
y="Composite Rate") +
theme(panel.background=element_blank(),
axis.text.x=element_blank(),
axis.ticks=element_blank())
plot <- plot + coord_flip()  # flip coordinates
plot
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
# plotting
plot <- ggplot(df, aes(x=Measure_Domain, y=Composite_Score, group=VA_Hospital, color=VA_Hospital,
fill=VA_Hospital)) +
geom_text(data=df_va, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=-0.25) +
geom_text(data=df_nonva, aes(y=Composite_Score, label=Composite_Score), size=3, fontface="italic", hjust=1.25) +
geom_bar(data=df_va, aes(y=Composite_Score), stat="identity", color="black") +
geom_bar(data=df_nonva, aes(y=-Composite_Score), stat="identity", color="black") +
facet_grid(Bed_size ~ Teach) +
scale_y_continuous(labels=abs, expand=c(0.4, 0.4)) +
scale_fill_manual(values=CATEGORYCOLORS) +
scale_color_manual(values=CATEGORYCOLORS) +
labs(title="Hospital Compare Performance by Measure Domain (2014 Q4)",
x="Measure Domain",
y="Composite Rate") +
theme(panel.background=element_blank(),
axis.text.x=element_blank(),
axis.ticks=element_blank())
plot <- plot + coord_flip()  # fl
plot
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
foo <- read.csv("Z:/ACOCAHPS/YR3/ACO/DATA/HARVARD/aco_comp_unmasked_final_04132015.csv")
foo <- read.csv("Z:\ACOCAHPS\YR3\ACO\DATA\HARVARD\aco_comp_unmasked_final_04132015.csv")
foo <- read.csv("Z:/ACOCAHPS/YR3/ACO/DATA/HARVARD/aco_comp_unmasked_final_04132015.csv")
foo <- read.csv("C:/Users/mcui/Desktop/ACO CAHPS Y3/DATA/aco_comp_unmasked_final_04132015.csv")
?ptile
quantile(foo$score0_100, .12)
View(foo)
quantile(foo$reliabilities, c(0,.12))
foo2 <- foo[foo$item=="c_sdm",]
table(foo$item)
foo2 <- foo[foo$item=="m_sdm",]
foo2 <- foo[foo$item=="m_sdm",]
quantile(foo2$reliabilities, c(0,.12))
foo3 < subset(foo2, reliabilities < 0.6)
foo3 <- subset(foo2, reliabilities < 0.6)
View(foo3)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/example')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/data-explore')
packages <- c("AppliedPredictiveModeling","caret","ElemStatLearn",
"pgmm","rpart")
sapply(packages, install.packages)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
#Q1:
#subset the data to training set and testing set based on Case variable
training <- subset(segmentationOriginal,Case=="Train")
testing <- subset(segmentationOriginal,Case=="Test")
set.seed(125)
#Fit a CART model with the rpart method using all predictor variables
#and default caret settings
model1 <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(model1$finalModel)
library(caret)
install.packages("caret")
#subset the data to training set and testing set based on Case variable
training <- subset(segmentationOriginal,Case=="Train")
testing <- subset(segmentationOriginal,Case=="Test")
set.seed(125)
#Fit a CART model with the rpart method using all predictor variables
#and default caret settings
model1 <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(model1$finalModel)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
install.packages("rpart")
install.packages("caret")
data("segmentationOriginal")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("rpart")
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(forecast)
library(lubridate)
# Question 1 --------------------------------------------------------------
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
set.seed(33833)
model_tree = train(y ~ ., data = vowel.train, method = 'rf')
model_gbm = train(y ~ ., data = vowel.train, method = 'gbm')
pred_tree = predict(model_tree, vowel.test)
pred_gbm = predict(model_gbm, vowel.test)
install.packages("rpart")
install.packages("caret")
install.packages("AppliedPredictiveModeling")
install.packages("rattle")
install.packages("rattle")
install.packages("forecast")
install.packages("lubridate")
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(forecast)
library(lubridate)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
set.seed(33833)
model_tree = train(y ~ ., data = vowel.train, method = 'rf')
model_gbm = train(y ~ ., data = vowel.train, method = 'gbm')
pred_tree
pred_tree = predict(model_tree, vowel.test)
pred_tree
predict(model_tree, vowel.test)
update.packages(ask=F, repos="http://cran.rstudio.com")
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
if (!require('devtools')) install.packages('devtools')
devtools::install_github('rstudio/leaflet')
install.packages("Rtools")
remove.packages("shiny")
install.packages("shiny")
remove.packages("htmlwidgets")
install.packages("htmlwidgets")
devtools::install_github('rstudio/leaflet')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
names(allzips)
names(cleantable)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
names(allzips)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
names(allzips)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
names(allzips)
str(allzips)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
set.seed(100)
zipdata <- allzips[sample.int(nrow(allzips), 10000),]
names(zipdata)
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/superzip')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
shiny::runApp('C:/Users/mcui/Desktop/datavis/shiny/acoscores')
